#!/bin/sh

usage() {
    printf "\\nUsage: %s [-5] [-6] [-l TTL] [-f] [-t] [-e] [-v] [-s] [-i EXT_IF] -a APIKEY -d EXAMPLE.COM -r \"RECORD-NAMES\"

-5: Use Gandi's new LiveDNS platform
-6: Update AAAA record(s) instead of A record(s)
-l: Set a custom TTL on records (only supported on LiveDNS)
-f: Force the creation of a new zonefile regardless of IP address or TTL discrepancy
-t: On Gandi's legacy DNS platform, if a new version of the zonefile is created, don't activate it. On LiveDNS, just print the updates that would be made if this flag wasn't used.
-e: Print debugging information to stdout
-v: Print information to stdout even if an update isn't needed
-s: Use stdin instead of OpenDNS to determine external IP address
-i: Use ifconfig instead of OpenDNS to determine external IP address

TTL: The custom TTL value (in seconds) to set on all records
EXT_IF: The name of your external network interface
APIKEY: Your API key provided by Gandi
EXAMPLE.COM: The domain name whose active zonefile will be updated
RECORD-NAMES: A space-separated list of the name(s) of the A or AAAA record(s) to update or create\\n\\n" "$0"
    exit 1
}

#
# Process parameters
#

while [ $# -gt 0 ]; do
    case "$1" in
        -6) ipv6="yes";;
        -l) ttl="$2"; shift;;
        -f) force="yes";;
        -t) testing="yes";;
        -e) debug="yes";;
        -v) verbose="yes";;
        -s) stdin_ip="yes";;
        -i) ext_if="$2"; shift;;
        -a) apikey="$2"; shift;;
        -d) domain="$2"; shift;;
        -r) records="$2"; shift;;
        *) usage; break
    esac
    shift
done
if [ -z "$apikey" -o -z "$domain" -o -z "$records" ]; then
    usage
fi
if [ "$ipv6" = "yes" ]; then
    record_type="AAAA"
    ip_regex="\([0-9A-Fa-f:]*\)"
    inet="inet6"
else
    record_type="A"
    ip_regex="\([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\)"
    inet="inet"
fi
if [ "$debug" = "yes" ]; then
    printf "Initial variables:\\n---\\napikey = %s\\ndomain = %s\\nrecords = %s\\nttl (only relevant with LiveDNS) = %s\\nrecord_type = %s\\nip_regex = %s\\n---\\n\\n" "$apikey" "$domain" "$records" "$ttl" "$record_type" "$ip_regex"
fi

#
# Set API address and script version
#

gandi="https://dns.api.gandi.net"
gad_version="2.0.0"

#
# Function to call Gandi's v5/LiveDNS REST API
#
# $1 is the HTTP verb. Only GET, PUT, and POST are used in this script.
# $2 is the API endpoint
# $3 is the body of the request. If the verb is GET and a third parameter is
#    provided, it is ignored.
#

rest() {
    if [ "$debug" = "yes" ]; then
        printf "REST call to endpoint:\\n---\\n%s\\n---\\n\\n" "$2" 1>&2
    fi
    # Throw away third argument to function if verb is GET
    if [ "$1" != "GET" ]; then
        payload="$3"
    fi
    url="${gandi}/api/v5/${2}"

    if [ "$debug" = "yes" ]; then
        echo -e "Sending REST ${1} call to ${url}\n" 1>&2

        if [ ! -z "$3" ]; then
            echo -e "with payload:\n---\n${3}\n---\n\n"
        fi
    fi

    curl -sLX ${1} \
        -H "User-Agent: Gandi Automatic DNS shell script/${gad_version}" \
        -H "Content-Type: application/json" \
        -H "X-Api-Key: ${apikey}" \
        -d "${3}" \
        "$url" 2> /dev/null \
        | tail -1
}

#
# Function to update existing DNS records with a new value
#
# $1 is a space-separated list of record names to update
#

update() {
    while [ ! -z "$1" ]; do
        new_record_json=$(rest "PUT" "zones/${zone_id}/records/${1}/${record_type}" "{\"rrset_ttl\": \"${new_ttl}\", \"rrset_values\": [\"${ext_ip}\"]}")
        new_record_message=$(echo "$new_record_json" | jq -r.message)
        if [ "$debug" = "yes" ]; then
            printf "new_record_json:\\n---\\n%s\\n---\\n\\n" "$new_record_json"
            printf "new_record_message:\\n---\\n%s\\n---\\n\\n" "$new_record_message"
        fi
        shift
    done
}

#
# Function to create new DNS records
#
# $1 is a space-separated list of record names to create
#

create() {
    while [ ! -z "$1" ]; do
        new_record_json=$(rest "POST" "zones/${zone_id}/records/${1}/${record_type}" "{\"rrset_ttl\": \"${new_ttl}\", \"rrset_values\": [\"${ext_ip}\"]}")
        new_record_message=$(echo "$new_record_json" | jq -r.message)
        if [ "$debug" = "yes" ]; then
            printf "new_record_json:\\n---\\n%s\\n---\\n\\n" "$new_record_json"
            printf "new_record_message:\\n---\\n%s\\n---\\n\\n" "$new_record_message"
        fi
        shift
    done
}

#
# Function to check existing DNS information and see if it matches the external
# IP address (and TTL in the case of LiveDNS)
#
# $1 is a space-separated list of record names to check
#

check() {
    while [ ! -z "$1" ]; do
        record_json=$(rest "GET" "zones/${zone_id}/records/${1}/${record_type}")
        if [ "$debug" = "yes" ]; then
            printf "record_json:\\n---\\n%s\\n---\\n\\n" "$record_json"
        fi
        record_value=$(echo "$record_json" | jq -r '.rrset_values[0]')
        record_ttl=$(echo "$record_json" | jq -r .rrset_ttl)
        record_count=$(echo "$record_json" | jq -r '.rrset_values | length')
        # If a custom TTL wasn't provided, just set it to the existing one.
        # If the record TTL is empty (because the record doesn't exist) and
        # no custom TTL was provided, set a default.
        if [ -z "$record_ttl" -a -z "$ttl" ]; then
            new_ttl="10800"
        elif [ -z "$ttl" ]; then
            new_ttl="$record_ttl"
        else
            new_ttl="$ttl"
        fi
        if [ "$record_count" -gt "1" ]; then
            printf "Sorry, but gad does not support updating multiple records with the same name.\\n"
            exit 1
        elif [ -z "$record_value" ]; then
            if [ -z "$records_to_create" ]; then
                records_to_create="$1"
            else
                records_to_create="${records_to_create} ${1}"
            fi
        elif [ "$ext_ip" != "$record_value" -o "$new_ttl" != "$record_ttl" -o "$force" = "yes" ]; then
            if [ -z "$records_to_update" ]; then
                records_to_update="$1"
            else
                records_to_update="${records_to_update} ${1}"
            fi
        fi
        if [ "$debug" = "yes" ]; then
            printf "Results after checking record:\\n---\\nrecord: %s\\nrecord_value: %s\\nrecords_to_create: %s\\nrecords_to_update: %s\\n---\\n\\n" "$1" "$record_value" "$records_to_create" "$records_to_update"
        fi
        shift
    done
}

#
# Get correct IP address
#

if [ "$stdin_ip" = "yes" ]; then
    ext_ip_method="standard input"
    read ext_ip
elif [ ! -z "$ext_if" ]; then
    ext_ip_method="ifconfig ${ext_if}"
    ext_ip=$(ifconfig "$ext_if" | sed -n "s/.*${inet} \(addr:\)* *${ip_regex}.*/\2/p" | head -1)
elif [ ! -z "$CURL_IP_ENDPOINT" ]; then
    ext_ip_method="curl endpoint ${CURL_IP_ENDPOINT}"
    if [ "$ipv6" = "yes" ]; then
        ext_ip=$(curl -6sL "$CURL_IP_ENDPOINT")
    else
        ext_ip=$(curl -4sL "$CURL_IP_ENDPOINT")
    fi
else
    ext_ip_method="OpenDNS"
    ext_ip=$(dig "$record_type" +short @resolver1.opendns.com myip.opendns.com)
fi
if [ -z "$ext_ip" ]; then
    printf "Failed to determine external IP address with %s. See above error.\\n" "$ext_ip_method"
    exit 1
fi
if [ "$debug" = "yes" ]; then
    printf "IP information:\\n---\\next_ip_method: %s\\next_ip: %s\\n---\\n\\n" "$ext_ip_method" "$ext_ip"
fi

#
# Get the active zonefile for the domain
#

domain_json=$(rest "GET" "domains/${domain}")
if [ "$debug" = "yes" ]; then
    printf "domain_json:\\n---\\n%s\\n---\\n\\n" "$domain_json"
fi
zone_id=$(echo "$domain_json" | jq -r .zone_uuid)
if [ -z "$zone_id" ]; then
    printf "No zone_id returned. This is expected with Gandi's test API or if you send a LiveDNS API key to Gandi's legacy API. Use gad's -t flag for testing or the -5 flag for LiveDNS.\\n"
    exit 1
fi
if [ "$debug" = "yes" ]; then
    printf "zone_id:\\n---\\n%s\\n---\\n\\n" "$zone_id"
fi

#
# Check values of records in the active version of the zonefile
#

set -f
check $records
set +f

#
# If there are any mismatches, create a new version of the zonefile, update the incorrect records, and activate it
#

if [ ! -z "$records_to_update" -o ! -z "$records_to_create" ]; then
    new_snapshot_json=$(rest "POST" "zones/${zone_id}/snapshots" "")
    new_snapshot_id=$(echo "$new_snapshot_json" | jq -r .uuid)
    if [ "$debug" = "yes" ]; then
        printf "new_snapshot_json:\\n---\\n%s\\n---\\n\\n" "$new_snapshot_json"
        printf "new_snapshot_id:\\n---\\n%s\\n---\\n\\n" "$new_snapshot_id"
    fi
    if [ "$testing" != "yes" ]; then
        set -f
        update $records_to_update
        create $records_to_create
        set +f
        printf "Created a new snapshot and tried to update the following live %s records to %s with TTL of %s seconds: %s %s\\n" "$record_type" "$ext_ip" "$new_ttl" "$records_to_update" "$records_to_create"
    else
        printf "Testing mode! Not sending any updates to the LiveDNS API.\\nIn non-testing mode, gad would have tried to update the following live %s records to %s with TTL of %s seconds: %s %s\\n" "$record_type" "$ext_ip" "$new_ttl" "$records_to_update" "$records_to_create"
    fi
else
    if [ "$verbose" = "yes" ]; then
        printf "External IP address %s detected with %s and TTL value of %s matches records: %s. No update needed. Exiting.\\n" "$ext_ip" "$ext_ip_method" "$new_ttl" "$records"
    fi
    exit
fi
